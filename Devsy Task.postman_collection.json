{
	"info": {
		"_postman_id": "91513689-4113-4f99-82fa-1550704b7378",
		"name": "Devsy Task",
		"description": "API testing Task for Devsy using Postman collections",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11429822"
	},
	"item": [
		{
			"name": "Get  all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Address object contains all required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(user) {\r",
							"    pm.expect(user.address).to.be.an('object');\r",
							"    pm.expect(user.address.street).to.exist;\r",
							"    pm.expect(user.address.suite).to.exist;\r",
							"    pm.expect(user.address.city).to.exist;\r",
							"    pm.expect(user.address.zipcode).to.exist;\r",
							"    pm.expect(user.address.geo).to.exist;\r",
							"  });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					},
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{url}}/users?name=Ervin Howell",
					"host": [
						"{{url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "name",
							"value": "Ervin Howell"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get valid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
							"});\r",
							"\r",
							"pm.test(\"user name is correct\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Chelsey Dietrich\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/users/{{validUserID}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"{{validUserID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Invalid user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 404\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the correct Content-Type header\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is an empty JSON object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object').that.is.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message field should not be present in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.message).to.not.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/users/{{invalidUserID}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"{{invalidUserID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "search by valid name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Company has name, catchPhrase, and bs\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    \r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user.company).to.exist;\r",
							"        pm.expect(user.company.name).to.exist;\r",
							"        pm.expect(user.company.catchPhrase).to.exist;\r",
							"        pm.expect(user.company.bs).to.exist;\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test for response against saved value\r",
							"pm.test(\"Validate 'user name' in response against saved value\", function () {\r",
							"    const savedUserName = pm.variables.get(\"validUserName\");\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user.username).to.equal(savedUserName);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/users?name={{validName}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "name",
							"value": "{{validName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "search by valid user name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Company contains name, catchPhrase, and bs\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    \r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user.company).to.be.an('object');\r",
							"        pm.expect(user.company.name).to.exist;\r",
							"        pm.expect(user.company.catchPhrase).to.exist;\r",
							"        pm.expect(user.company.bs).to.exist;\r",
							"    });\r",
							"});\r",
							"\r",
							"// Retrieve the saved \"username\" value from the variable\r",
							"pm.test(\"Validate response against saved 'name' value\", function() {\r",
							"    var savedName = pm.variables.get(\"validName\");\r",
							"    var responseBody = pm.response.json();\r",
							"    \r",
							"    responseBody.forEach(function(user) {\r",
							"        pm.expect(user.name).to.equal(savedName);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/users?username={{validUserName}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "username",
							"value": "{{validUserName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search by invalid name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the content type of application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is an empty array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.empty;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Response is not null or undefined\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.not.be.null.and.to.not.be.undefined;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/users?name={{invalidName}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "name",
							"value": "{{invalidName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search by invalid user name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the correct Content-Type header\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is an empty array\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array').that.is.empty;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Invalid username is handled gracefully\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"    pm.expect(pm.response.json()).to.be.empty;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/users?username={{invalidUserName}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "username",
							"value": "{{invalidUserName}}"
						}
					]
				}
			},
			"response": []
		}
	]
}